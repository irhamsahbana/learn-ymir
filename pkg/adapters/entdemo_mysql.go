// Package adapters are the glue between components and external sources.
// # This manifest was generated by ymir. DO NOT EDIT.
package adapters

import (
	"fmt"
	"net"
	"strconv"
	"time"

	// mysql go lib.
	"github.com/go-sql-driver/mysql"

	"entgo.io/ent/dialect"
	sqlEnt "entgo.io/ent/dialect/sql"
	"github.com/rs/zerolog/log"
)

var EntdemoMySQLOpen = sqlEnt.Open // EntdemoMySQLOpen will invoke to test case.

// EntdemoMySQL is data of instances.
type EntdemoMySQL struct {
	NetworkDB
	driver *sqlEnt.Driver
}

// Open is open the connection of mysql.
func (e *EntdemoMySQL) Open() (*sqlEnt.Driver, error) {
	if e.driver == nil {
		return nil, fmt.Errorf("driver was failed to connected")
	}
	return e.driver, nil
}

// Connect is connected the connection of mysql.
func (e *EntdemoMySQL) Connect() (err error) {
	e.driver, err = EntdemoMySQLOpen(dialect.MySQL, e.dsn())
	if err != nil {
		log.Error().Err(err).Msg("EntdemoMySQLOpen is failed to open")
		return err
	}

	if e.MaxIdleCons == 0 {
		e.driver.DB().SetMaxIdleConns(0)
	} else {
		e.driver.DB().SetMaxIdleConns(e.MaxIdleCons)
	}
	return nil
}

// Disconnect is disconnect the connection of mysql.
func (e *EntdemoMySQL) Disconnect() error {
	return e.driver.Close()
}

func (e *EntdemoMySQL) dsn() string {
	cfg := mysql.Config{
		User:                 e.User,
		Passwd:               e.Password,
		DBName:               e.Database,
		Timeout:              time.Second * time.Duration(e.ConnectionTimeout),
		ParseTime:            true,
		AllowNativePasswords: true,
		Params:               make(map[string]string),
	}
	if e.Host != "" {
		if e.Host[0] != '/' {
			cfg.Net = "tcp"
			cfg.Addr = e.Host

			if e.Port != 0 {
				cfg.Addr = net.JoinHostPort(e.Host, strconv.Itoa(int(e.Port)))
			}
		} else {
			cfg.Net = "unix"
			cfg.Addr = e.Host
		}
	}
	return cfg.FormatDSN()
}

// WithEntdemoMySQL option function to assign on adapters.
func WithEntdemoMySQL(driver Driver[*sqlEnt.Driver]) Option {
	return func(a *Adapter) {
		if err := driver.Connect(); err != nil {
			panic(err)
		}
		open, err := driver.Open()
		if err != nil {
			panic(err)
		}
		a.EntdemoMySQL = open
	}
}

